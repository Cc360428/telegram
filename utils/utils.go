/**
 * @Author: Cc
 * @Description: 描述
 * @File: utils
 * @Version: 1.0.0
 * @Date: 2022/10/12 17:09
 * @Software : GoLand
 */

package utils

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"telegram_bot/confis"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func SendTG(context string) {

	chatID := os.Getenv("ChatId")
	token := os.Getenv("ChatToken")
	SendTelegram(StrToInt64(chatID), token, time.Now().Format("2006-01-02 15:04:05")+"\n"+context)
}

// SendTelegram 发送小飞机预警
func SendTelegram(chatID int64, token, text string) {

	bot, err := tgbotapi.NewBotAPI(token)

	if err != nil {
		fmt.Println("NewBotApi Error", err.Error())
		return
	}

	newMessage := tgbotapi.NewMessage(chatID, text)
	_, err = bot.Send(newMessage)
	if err != nil {
		fmt.Println("SendTelegram Error", err.Error())
		return
	}
}

type AutoGenerated struct {
	Status string `json:"status"`
	Data   struct {
		ResultType string `json:"resultType"`
		Result     []struct {
			Metric struct {
				Name     string `json:"__name__"`
				Group    string `json:"group"`
				Instance string `json:"instance"`
				Job      string `json:"job"`
				Server   string `json:"server"`
			} `json:"metric"`
			Value []interface{} `json:"value"`
		} `json:"result"`
	} `json:"data"`
}

func Query(queryName, job string) int64 {
	baseURL := confis.GetBaseURL()
	if len(baseURL) == 0 {
		return 0
	}
	url := fmt.Sprintf(baseURL+"query=sum(%v{job=\"%v\"})", queryName, job)
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println("error", err.Error())
	}
	defer resp.Body.Close()
	s, err := io.ReadAll(resp.Body)
	if err != nil {
		return 0
	}

	var responseQ AutoGenerated
	err = json.Unmarshal(s, &responseQ)
	if err != nil {
		fmt.Println("Unmarshal error", err.Error())
	}

	if responseQ.Status == "success" {
		for _, value := range responseQ.Data.Result {
			return StrToInt64(value.Value[1].(string))
		}
	}
	return 0
}

// StrToInt64 string转到int64
func StrToInt64(src string) int64 {
	//	log.Print("src:%s.", src)
	dst, err := strconv.ParseInt(src, 10, 64)
	if err != nil {
		return 0
	}
	return dst
}
